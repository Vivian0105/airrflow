[["index.html", "Immcantation - enchantR Collapse Duplicates 1 Input parameters 2 Read repertoires 3 Homogenize c_call, c_primer and c_region fields containing isotype information 4 Collapse Duplicates 5 Remove duplicate sequences 6 Software versions", " Immcantation - enchantR Collapse Duplicates Updated: Tue Jan 28 16:39:16 2025 1 Input parameters Code printParams(params) Table 1.1: Input parameters. 2 Read repertoires Code # Read input db &lt;- readInput(params[[&#39;input&#39;]]) input_sizes &lt;- db %&gt;% group_by(!!!rlang::syms(unique(c(&quot;input_file&quot;)))) %&gt;% summarize(input_size=n()) input_size &lt;- nrow(db) 3 Homogenize c_call, c_primer and c_region fields containing isotype information Code match_isotype &lt;- function(x, regex) { match &lt;- stringr::str_match(x, regex) if (length(match) &gt; 0) return(match) else return(NA) } # Based on Human and mouse IMGT gene nomenclature ig_isotype_heavy_regex &lt;- &quot;IG[H][AEMGD]P?[1234]?[ABC]?&quot; ig_isotype_light_regex &lt;- &quot;IG[LK][C][1234567]?[ABC]?&quot; tr_isotype_regex &lt;- &quot;TR[ABDG]C[1234]?&quot; if (any(is.na(db[[&#39;c_call&#39;]]))) { if (params$c_region_column %in% colnames(db)) { if (params$locus == &quot;IG&quot;) { db &lt;- db %&gt;% mutate( c_region_translated = if_else(locus == &quot;IGH&quot;, sapply(get(!!params$c_region_column), match_isotype, ig_isotype_heavy_regex), sapply(get(!!params$c_region_column), match_isotype, ig_isotype_light_regex)), ) cat(db$c_region_translated) } else if (params$locus == &quot;TR&quot;) { db &lt;- db %&gt;% mutate( c_region_translated = sapply(get(!!params$c_region_column), match_isotype, tr_isotype_regex) ) } db &lt;- db %&gt;% mutate( c_call = ifelse(is.na(c_call), c_region_translated, c_call) ) %&gt;% select(-c_region_translated) } else if (params$c_primer_column %in% colnames(db)) { if (params$locus == &quot;IG&quot;) { db &lt;- db %&gt;% mutate( c_primer_translated = if_else(locus == &quot;IGH&quot;, sapply(get(!!params$c_primer_column), match_isotype, ig_isotype_heavy_regex), sapply(get(!!params$c_primer_column), match_isotype, ig_isotype_light_regex)) ) } else if (params$locus == &quot;TR&quot;) { db &lt;- db %&gt;% mutate( c_primer_translated = sapply(get(!!params$c_primer_column), match_isotype, tr_isotype_regex) ) } db &lt;- db %&gt;% mutate( c_call = ifelse(is.na(c_call), c_primer_translated, c_call) ) %&gt;% select(-c_primer_translated) } } 4 Collapse Duplicates Duplicated sequence_alignment (exact character string): Code table(duplicated(db[[&#39;sequence_alignment&#39;]])) ## ## FALSE TRUE ## 4840 4015 Code num_fields &lt;- c(&quot;consensus_count&quot;,&quot;duplicate_count&quot;) num_fields &lt;- num_fields[num_fields %in% colnames(db)] if (length(num_fields)&lt;1) {num_fields &lt;- NULL} db &lt;- findDuplicates(db, groups=params$collapseby, text_fields=NULL, num_fields=num_fields, seq_fields=NULL, nproc=params[[&#39;nproc&#39;]]) 5 Remove duplicate sequences Code pass &lt;- db[[&#39;collapse_pass&#39;]] if (!is.null(params$outname)) { output_fn &lt;- paste0(params$outname,&quot;_collapse-pass.tsv&quot;) } else { output_fn &lt;- sub(&quot;.tsv$&quot;, &quot;_collapse-pass.tsv&quot;, basename(params$input)) } if (!is.null(params$log)) { log_fn &lt;- paste0(params$log,&quot;.txt&quot;) } else { log_fn &lt;- sub(&quot;_collapse-pass.tsv$&quot;, &quot;_command_log.txt&quot;, basename(output_fn)) } output_groups &lt;- db[pass,] %&gt;% ungroup() %&gt;% group_by(input_file) %&gt;% summarize(output_size=n()) %&gt;% left_join(input_sizes) output_files &lt;- c() output_sizes &lt;- c() dir.create(file.path(params$outdir,&quot;repertoires&quot;)) for (i in 1:nrow(output_groups)) { group_db &lt;- right_join(db[pass,], output_groups[i,,drop=F], by=&quot;input_file&quot;) group_db_label &lt;- gsub(&quot;^id_&quot;,&quot;&quot;,makeLabel(group_db, fields= &quot;input_file&quot;)) group_fn &lt;- file.path(params$outdir,&quot;repertoires&quot;,paste0(group_db_label,&quot;_&quot;,output_fn)) output_files &lt;- c(output_files, group_fn) output_sizes &lt;- c(output_sizes, nrow(group_db)) write_rearrangement(group_db %&gt;% select(!any_of(c(&quot;input_file&quot;, &quot;input_size&quot;, &quot;output_size&quot;))), file=group_fn) cat(&quot;- [&quot;,group_db_label,&quot;](&quot;,file.path(&quot;repertoires&quot;,basename(group_fn)),&quot;)\\n&quot;, sep=&quot;&quot;) } ## - [SRR1383451_meta-pass](repertoires/SRR1383451_meta-pass_SRR1383451_collapse-pass.tsv) Code cat(&quot;START&gt; CollapseDuplicates&quot;, file=log_fn, append=F) for (i in 1:nrow(output_groups)) { cat(paste0(&quot;\\nFILE&quot;,i,&quot;&gt; &quot;,output_groups[[&#39;input_file&#39;]][i]), file=log_fn, append=T) cat(paste0(&quot;\\nOUTPUT&quot;,i,&quot;&gt; &quot;,basename(output_files[i])), file=log_fn, append=T) cat(paste0(&quot;\\nPASS&quot;,i,&quot;&gt; &quot;,output_sizes[i]), file=log_fn, append=T) cat(paste0(&quot;\\nFAIL&quot;,i,&quot;&gt; &quot;,output_groups[[&#39;input_size&#39;]][i]-output_sizes[i]), file=log_fn, append=T) } 6 Software versions Code sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-redhat-linux-gnu ## Running under: Fedora Linux 40 (Container Image) ## ## Matrix products: default ## BLAS/LAPACK: FlexiBLAS OPENBLAS-OPENMP; LAPACK version 3.11.0 ## ## locale: ## [1] C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] shazam_1.2.0 alakazam_1.3.0 ggplot2_3.5.1 airr_1.5.0 ## [5] dplyr_1.1.4 DT_0.33 enchantr_0.1.19 ## ## loaded via a namespace (and not attached): ## [1] bitops_1.0-9 gridExtra_2.3 ## [3] rlang_1.1.4 magrittr_2.0.3 ## [5] clue_0.3-66 GetoptLong_1.0.5 ## [7] ade4_1.7-22 matrixStats_1.4.1 ## [9] compiler_4.4.2 png_0.1-8 ## [11] vctrs_0.6.5 stringr_1.5.1 ## [13] pkgconfig_2.0.3 shape_1.4.6.1 ## [15] crayon_1.5.3 fastmap_1.2.0 ## [17] XVector_0.46.0 ggraph_2.2.1 ## [19] utf8_1.2.4 Rsamtools_2.22.0 ## [21] rmarkdown_2.29 tzdb_0.4.0 ## [23] UCSC.utils_1.2.0 bit_4.5.0 ## [25] purrr_1.0.2 xfun_0.49 ## [27] zlibbioc_1.52.0 cachem_1.1.0 ## [29] seqinr_4.2-36 GenomeInfoDb_1.42.0 ## [31] jsonlite_1.8.9 progress_1.2.3 ## [33] DelayedArray_0.32.0 BiocParallel_1.40.0 ## [35] tweenr_2.0.3 parallel_4.4.2 ## [37] prettyunits_1.2.0 cluster_2.1.6 ## [39] R6_2.5.1 bslib_0.8.0 ## [41] stringi_1.8.4 RColorBrewer_1.1-3 ## [43] diptest_0.77-1 jquerylib_0.1.4 ## [45] GenomicRanges_1.58.0 bookdown_0.41 ## [47] knitr_1.49 Rcpp_1.0.13-1 ## [49] SummarizedExperiment_1.36.0 iterators_1.0.14 ## [51] readr_2.1.5 IRanges_2.40.0 ## [53] Matrix_1.7-1 igraph_2.1.1 ## [55] tidyselect_1.2.1 rstudioapi_0.17.1 ## [57] abind_1.4-8 yaml_2.3.10 ## [59] viridis_0.6.5 doParallel_1.0.17 ## [61] codetools_0.2-20 lattice_0.22-6 ## [63] tibble_3.2.1 Biobase_2.66.0 ## [65] withr_3.0.2 evaluate_1.0.1 ## [67] polyclip_1.10-7 circlize_0.4.16 ## [69] Biostrings_2.74.0 pillar_1.9.0 ## [71] MatrixGenerics_1.18.0 KernSmooth_2.23-24 ## [73] foreach_1.5.2 stats4_4.4.2 ## [75] plotly_4.10.4 generics_0.1.3 ## [77] vroom_1.6.5 S4Vectors_0.44.0 ## [79] hms_1.1.3 munsell_0.5.1 ## [81] scales_1.3.0 glue_1.8.0 ## [83] lazyeval_0.2.2 tools_4.4.2 ## [85] data.table_1.16.2 GenomicAlignments_1.42.0 ## [87] graphlayouts_1.2.1 tidygraph_1.3.1 ## [89] grid_4.4.2 tidyr_1.3.1 ## [91] ape_5.8 crosstalk_1.2.1 ## [93] colorspace_2.1-1 nlme_3.1-166 ## [95] GenomeInfoDbData_1.2.13 ggforce_0.4.2 ## [97] cli_3.6.3 fansi_1.0.6 ## [99] S4Arrays_1.6.0 viridisLite_0.4.2 ## [101] ComplexHeatmap_2.18.0 gtable_0.3.6 ## [103] sass_0.4.9 digest_0.6.37 ## [105] BiocGenerics_0.52.0 SparseArray_1.6.0 ## [107] ggrepel_0.9.6 rjson_0.2.23 ## [109] htmlwidgets_1.6.4 farver_2.1.2 ## [111] memoise_2.0.1 htmltools_0.5.8.1 ## [113] lifecycle_1.0.4 httr_1.4.7 ## [115] GlobalOptions_0.1.2 bit64_4.5.2 ## [117] MASS_7.3-61 "]]
